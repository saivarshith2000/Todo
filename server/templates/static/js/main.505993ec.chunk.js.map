{"version":3,"sources":["ColorModeSwitcher.js","api.js","TodoPage/FetchErrorDialog.js","TodoPage/LoadingDialog.js","TodoPage/NoTodoDialog.js","TodoPage/TodoForm.js","TodoPage/utils.js","TodoPage/TodoItem.js","TodoPage/index.js","App.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","api","axios","create","baseURL","getTodos","get","then","resp","data","addTodo","todo","post","deleteTodo","id","delete","completeTodo","FetchErrorDialog","colorMode","bg","fontWeight","padding","my","mx","rounded","width","justifyContent","LoadingDialog","NoTodosDialog","TodoForm","handleAddTodo","addStatus","useDisclosure","isOpen","onOpen","onClose","useState","showError","setShowError","title","setTitle","content","setContent","closeModal","mt","onSubmit","e","preventDefault","pb","name","placeholder","mb","isRequired","value","onChange","target","rows","resize","p","colorScheme","mr","type","MS_IN_A_DAY","getTimeDiff","added","completed","t1","Date","getTime","t2","milliseconds","time","isNaN","days","Math","floor","seconds","minutes","hours","TodoItem","handleDelete","handleComplete","titleColor","bgColor","hoverBgColor","px","alignItems","_hover","cursor","background","py","flex","direction","ml","addedAt","toLocaleString","completedAt","disabled","TodoList","todos","length","map","TodoPage","useQuery","status","queryClient","useQueryClient","useMutation","onSuccess","invalidateQueries","addTodoMut","mutateAsync","deleteTodoMut","completeTodoMut","textAlign","App","theme","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.505993ec.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import axios from 'axios'\n\nconst api = axios.create({ baseURL: '/api' })\n\nexport const getTodos = () => api.get('/todos/').then(resp => resp.data)\n\nexport const addTodo = (todo) => api.post('/todos/', todo).then(resp => resp.data)\n\nexport const deleteTodo = (id) => api.delete(`/todos/${id}/`).then(resp => resp.data)\n\nexport const completeTodo = (id) => api.post('/complete_todo/', {id}).then(resp => resp.data)","import {Flex, useColorMode} from '@chakra-ui/react'\n\nexport default function FetchErrorDialog() {\n    const { colorMode } = useColorMode()\n    return (\n        <Flex\n            bg={colorMode === \"light\" ? \"red.100\" : \"red.700\"}\n            color={colorMode === \"light\" ? \"red.700\" : \"red.100\"}\n            fontWeight=\"bold\"\n            padding={5}\n            my={10}\n            mx=\"auto\"\n            rounded=\"md\"\n            width=\"50%\"\n            justifyContent=\"center\"\n        >\n            An error Occured while fetching your todos :(\n        </Flex>\n    );\n}","import {Flex, useColorMode} from '@chakra-ui/react'\n\nexport default function LoadingDialog() {\n    const { colorMode } = useColorMode()\n    return (\n        <Flex\n            bg={colorMode === \"light\" ? \"yellow.100\" : \"yellow.700\"}\n            color={colorMode === \"light\" ? \"yellow.700\" : \"yellow.100\"}\n            fontWeight=\"bold\"\n            padding={5}\n            my={10}\n            mx=\"auto\"\n            rounded=\"md\"\n            width=\"50%\"\n            justifyContent=\"center\"\n        >\n            Loading your todos...\n        </Flex>\n    );\n\n}\n","import {Flex, useColorMode} from '@chakra-ui/react'\n\nexport default function NoTodosDialog() {\n    const { colorMode } = useColorMode()\n    return (\n        <Flex\n            bg={colorMode === \"light\" ? \"green.100\" : \"green.700\"}\n            color={colorMode === \"light\" ? \"green.700\" : \"green.100\"}\n            fontWeight=\"bold\"\n            padding={5}\n            my={10}\n            mx=\"auto\"\n            rounded=\"md\"\n            width=\"50%\"\n            justifyContent=\"center\"\n        >\n            Yay! You don't have anything to do :)\n        </Flex>\n    );\n\n}","import {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Input,\n    Textarea,\n    useDisclosure,\n    Button,\n    Box,\n} from '@chakra-ui/react';\nimport { useState } from 'react';\n\nexport default function TodoForm({ handleAddTodo, addStatus }) {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const [showError, setShowError] = useState(false);\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n\n    function closeModal() {\n        setShowError(false)\n        setTitle(\"\")\n        setContent(\"\")\n        onClose()\n    }\n\n    return (\n        <>\n            <Button onClick={onOpen} mt={5} size=\"md\" width=\"25%\">\n                Add Todo\n            </Button>\n            <Modal isOpen={isOpen} onClose={closeModal} size=\"3xl\">\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader fontWeight=\"normal\">New Todo</ModalHeader>\n                    <ModalCloseButton />\n                    <form\n                        onSubmit={e => {\n                            e.preventDefault();\n                            handleAddTodo(title, content);\n                            if (addStatus === 'error') {\n                                setShowError(true)\n                            } else {\n                                closeModal()\n                            }\n                        }}\n                    >\n                        <ModalBody pb={5}>\n                            <Input\n                                name=\"title\"\n                                placeholder=\"Title\"\n                                variant=\"filled\"\n                                mb=\"5\"\n                                isRequired={true}\n                                value={title}\n                                onChange={e => setTitle(e.target.value)}\n                            />\n                            <Textarea\n                                name=\"content\"\n                                placeholder=\"Content\"\n                                variant=\"filled\"\n                                rows=\"5\"\n                                resize=\"vertical\"\n                                isRequired={true}\n                                value={content}\n                                onChange={e => setContent(e.target.value)}\n                            />\n                            {showError ? (\n                                <Box\n                                    color=\"red.400\"\n                                    fontWeight=\"bold\"\n                                    p={2}\n                                    mt={2}\n                                    rounded=\"md\"\n                                >\n                                    An error occured while adding new todo item\n                                </Box>\n                            ) : null}\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button\n                                colorScheme=\"green\"\n                                mr={3}\n                                type=\"submit\"\n                                variant=\"ghost\"\n                            >\n                                Add\n                            </Button>\n                            <Button onClick={closeModal} variant=\"ghost\">\n                                Cancel\n                            </Button>\n                        </ModalFooter>\n                    </form>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n}\n","const MS_IN_A_DAY = 24 * 60 * 60 * 1000;\n\nexport default function getTimeDiff(added, completed) {\n    let t1 = new Date(added).getTime(),\n        t2 = new Date(completed).getTime(),\n        milliseconds = 0,\n        time = \"\";\n    if (isNaN(t1) || isNaN(t2)) return \"\";\n    if (t1 < t2) milliseconds = t2 - t1;\n    else milliseconds = t1 - t2;\n    var days = Math.floor(milliseconds / MS_IN_A_DAY);\n    if (days > 0) {\n        time += days + \"d \";\n        milliseconds -= days * MS_IN_A_DAY\n    }\n    var seconds = Math.floor((milliseconds / 1000) % 60);\n    var minutes = Math.floor((milliseconds / (1000 * 60)) % 60);\n    var hours = Math.floor((milliseconds / (1000 * 60 * 60)) % 24);\n    if (hours > 0) time += hours + \"h \";\n    if (minutes > 0) time += minutes + \"m \";\n    if (seconds > 0) time += seconds + \"s \";\n    return time;\n}\n","import {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    useDisclosure,\n    Button,\n    Box,\n    Flex,\n    useColorModeValue,\n} from '@chakra-ui/react';\nimport getTimeDiff from './utils';\n\nexport default function TodoItem({ todo, handleDelete, handleComplete }) {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const titleColor = useColorModeValue('gray.700', 'gray.100');\n    const bgColor = useColorModeValue('gray.100', 'gray.600');\n    const hoverBgColor = useColorModeValue('gray.200', 'gray.500');\n    return (\n        <>\n            <Flex\n                width=\"70%\"\n                justifyContent=\"space-between\"\n                mx=\"auto\"\n                mt={2}\n                rounded=\"md\"\n                px={5}\n                alignItems=\"center\"\n                bg={bgColor}\n                _hover={{\n                    cursor: 'pointer',\n                    background: hoverBgColor,\n                }}\n            >\n                <Flex\n                    py={4}\n                    onClick={onOpen}\n                    color={titleColor}\n                    flex={1}\n                    alignItems=\"flex-start\"\n                >\n                    {todo.title}\n                </Flex>\n                <Flex direction=\"row\">\n                    {!todo.completed ? (\n                        <Button\n                            variant=\"ghost\"\n                            colorScheme=\"green\"\n                            ml={2}\n                            onClick={() => handleComplete(todo.id)}\n                        >\n                            Mark Complete\n                        </Button>\n                    ) : null}\n                    <Button\n                        variant=\"ghost\"\n                        colorScheme=\"red\"\n                        onClick={() => handleDelete(todo.id)}\n                    >\n                        Delete\n                    </Button>\n                </Flex>\n            </Flex>\n            <Modal isOpen={isOpen} onClose={onClose} size=\"3xl\">\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>{todo.title}</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody pb={5}>\n                        <Box fontSize=\"smaller\" color=\"gray.500\" mb={2}>\n                            Added at{' '}\n                            {new Date(todo.addedAt).toLocaleString('en-IN')}\n                        </Box>\n                        {todo.completed ? (\n                            <Box fontSize=\"smaller\" color=\"green.500\" mb={2}>\n                                Completed at{' '}\n                                {new Date(todo.completedAt).toLocaleString(\n                                    'en-IN'\n                                ) +\n                                    ` | ${getTimeDiff(\n                                        todo.completedAt,\n                                        todo.addedAt\n                                    )}`}\n                            </Box>\n                        ) : null}\n                        <Box>{todo.content}</Box>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button\n                            variant=\"ghost\"\n                            colorScheme=\"red\"\n                            onClick={() => handleDelete(todo.id)}\n                        >\n                            Delete\n                        </Button>\n                        {!todo.completed ? (\n                            <Button\n                                variant=\"ghost\"\n                                colorScheme=\"green\"\n                                ml={2}\n                                onClick={() => handleComplete(todo.id)}\n                                disabled={todo.completed}\n                            >\n                                Mark Complete\n                            </Button>\n                        ) : null}\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n}\n","import { Flex, Heading, useColorModeValue } from '@chakra-ui/react';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { getTodos, addTodo, deleteTodo, completeTodo } from '../api';\nimport FetchErrorDialog from './FetchErrorDialog';\nimport LoadingDialog from './LoadingDialog';\nimport NoTodosDialog from './NoTodoDialog';\nimport TodoForm from './TodoForm';\nimport TodoItem from './TodoItem';\n\nfunction TodoList({ todos, handleDelete, handleComplete }) {\n    if (todos?.length === 0) return <NoTodosDialog />;\n    return (\n        <Flex mt={5} direction=\"column\" width=\"100%\">\n            {todos.map(todo => (\n                <TodoItem\n                    handleDelete={handleDelete}\n                    handleComplete={handleComplete}\n                    todo={todo}\n                    key={todo.id}\n                />\n            ))}\n        </Flex>\n    );\n}\n\nexport default function TodoPage() {\n    const color = useColorModeValue('gray.700', 'gray.100');\n    const { data: todos, status } = useQuery('todos', getTodos);\n    const queryClient = useQueryClient();\n    const { status: addStatus, mutateAsync: addTodoMut } = useMutation(\n        addTodo,\n        {\n            onSuccess: () => queryClient.invalidateQueries('todos'),\n        }\n    );\n\n    const { mutateAsync: deleteTodoMut } = useMutation(\n        deleteTodo,\n        {\n            onSuccess: () => queryClient.invalidateQueries('todos'),\n        }\n    );\n\n    const { mutateAsync: completeTodoMut } =\n        useMutation(completeTodo, {\n            onSuccess: () => queryClient.invalidateQueries('todos'),\n        });\n\n    function handleAddTodo(title, content) {\n        addTodoMut({ title, content });\n    }\n\n    function handleDelete(id) {\n        deleteTodoMut(id);\n    }\n\n    function handleComplete(id) {\n        completeTodoMut(id);\n    }\n\n    function renderTodoList() {\n        if (status === 'loading') return <LoadingDialog />;\n        else if (status === 'error') return <FetchErrorDialog />;\n        return (\n            <TodoList\n                todos={todos}\n                handleDelete={handleDelete}\n                handleComplete={handleComplete}\n            />\n        );\n    }\n\n    return (\n        <Flex\n            direction=\"column\"\n            justifyContent=\"center\"\n            textAlign=\"center\"\n            alignItems=\"center\"\n        >\n            <Heading fontSize=\"4xl\" color={color}>\n                Todo\n            </Heading>\n            <TodoForm handleAddTodo={handleAddTodo} addStatus={addStatus} />\n            {renderTodoList()}\n        </Flex>\n    );\n}\n","import React from 'react';\nimport { ChakraProvider, theme, Flex } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport TodoPage from './TodoPage/index';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Flex direction=\"column\" px=\"10%\" py={5}>\n        <Flex justifyContent=\"flex-end\">\n          <ColorModeSwitcher />\n        </Flex>\n        <TodoPage />\n      </Flex>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClientProvider, QueryClient } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport App from './App';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <StrictMode>\n    <QueryClientProvider client={client}>\n      <ColorModeScript />\n      <App />\n      <ReactQueryDevtools />\n    </QueryClientProvider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}